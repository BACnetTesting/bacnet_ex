From 24d4ba14a82a075045f9f408e0c9085d65e5fef9 Mon Sep 17 00:00:00 2001
From: abelino <abelino.romo@gmail.com>
Date: Tue, 24 Sep 2024 19:39:09 -0700
Subject: [PATCH 6/8] Add routed multistate-input object support

---
 CMakeLists.txt                                |   4 +
 src/bacnet/bacenum.h                          |   2 +-
 src/bacnet/basic/object/routed_analog_input.c |  11 +-
 src/bacnet/basic/object/routed_analog_input.h |  23 +-
 .../basic/object/routed_multistate_input.c    | 492 ++++++++++++++++++
 .../basic/object/routed_multistate_input.h    |  92 ++++
 src/bacnet/basic/object/routed_object.c       |  63 +++
 src/bacnet/basic/object/routed_object.h       |  31 ++
 8 files changed, 704 insertions(+), 14 deletions(-)
 create mode 100644 src/bacnet/basic/object/routed_multistate_input.c
 create mode 100644 src/bacnet/basic/object/routed_multistate_input.h
 create mode 100644 src/bacnet/basic/object/routed_object.c
 create mode 100644 src/bacnet/basic/object/routed_object.h

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 08243de4..86b929aa 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -386,6 +386,10 @@ add_library(${PROJECT_NAME}
   src/bacnet/basic/object/piv.h
   src/bacnet/basic/object/routed_analog_input.c
   src/bacnet/basic/object/routed_analog_input.h
+  src/bacnet/basic/object/routed_multistate_input.c
+  src/bacnet/basic/object/routed_multistate_input.h
+  src/bacnet/basic/object/routed_object.c
+  src/bacnet/basic/object/routed_object.h
   src/bacnet/basic/object/schedule.c
   src/bacnet/basic/object/schedule.h
   src/bacnet/basic/object/structured_view.c
diff --git a/src/bacnet/bacenum.h b/src/bacnet/bacenum.h
index 0332cbcc..9952b5cf 100644
--- a/src/bacnet/bacenum.h
+++ b/src/bacnet/bacenum.h
@@ -1499,7 +1499,7 @@ typedef enum BACnetObjectType {
     MAX_BACNET_OBJECT_TYPE = 1024,
     /* special usage for this library 16-bit max */
     OBJECT_NONE = 65535
-} BACNET_OBJECT_TYPE;
+} __attribute__((packed)) BACNET_OBJECT_TYPE;
 
 typedef enum {
     SEGMENTATION_BOTH = 0,
diff --git a/src/bacnet/basic/object/routed_analog_input.c b/src/bacnet/basic/object/routed_analog_input.c
index 5d62bdba..6064161e 100644
--- a/src/bacnet/basic/object/routed_analog_input.c
+++ b/src/bacnet/basic/object/routed_analog_input.c
@@ -5,6 +5,7 @@
 #include "bacnet/basic/sys/keylist.h"
 #include "bacnet/basic/object/device.h"
 #include "bacnet/basic/object/routed_analog_input.h"
+#include "bacnet/basic/object/routed_object.h"
 
 static const int PROPERTIES_REQUIRED[] = {
   PROP_OBJECT_IDENTIFIER,
@@ -38,7 +39,7 @@ unsigned Routed_Analog_Input_Count(void)
 {
   DEVICE_OBJECT_DATA *device = Get_Routed_Device_Object(-1);
 
-  return Keylist_Count(device->objects);
+  return Routed_Object_Count_By_Type(device->objects, OBJECT_ANALOG_INPUT);
 }
 
 uint32_t Routed_Analog_Input_Index_To_Instance(unsigned index)
@@ -46,7 +47,12 @@ uint32_t Routed_Analog_Input_Index_To_Instance(unsigned index)
   DEVICE_OBJECT_DATA *device = Get_Routed_Device_Object(-1);
 
   KEY key = UINT32_MAX;
-  Keylist_Index_Key(device->objects, index, &key);
+  Routed_Object_Index_Key(
+    device->objects,
+    OBJECT_ANALOG_INPUT,
+    index,
+    &key
+  );
 
   return key;
 }
@@ -350,6 +356,7 @@ uint32_t Routed_Analog_Input_Create(uint32_t object_instance)
   if (!object)
     return BACNET_MAX_INSTANCE;
 
+  object->Type = OBJECT_ANALOG_INPUT;
   object->Reliability = RELIABILITY_NO_FAULT_DETECTED;
   object->COV_Increment = 1.0;
   object->Present_Value = 0.0f;
diff --git a/src/bacnet/basic/object/routed_analog_input.h b/src/bacnet/basic/object/routed_analog_input.h
index 9cca4462..63ef9b16 100644
--- a/src/bacnet/basic/object/routed_analog_input.h
+++ b/src/bacnet/basic/object/routed_analog_input.h
@@ -9,17 +9,18 @@
 #define MAX_OBJ_DESC_LEN 64
 
 typedef struct routed_analog_input_object {
-  unsigned Event_State:3;
-  float    Present_Value;
-  uint32_t Reliability;
-  bool     Out_Of_Service;
-  uint8_t  Units;
-  float    Prior_Value;
-  float    COV_Increment;
-  bool     Changed;
-  char     Object_Name[MAX_OBJ_NAME_LEN];
-  char     Description[MAX_OBJ_DESC_LEN];
-} ROUTED_ANALOG_INPUT_OBJECT;
+  BACNET_OBJECT_TYPE Type;
+  unsigned           Event_State:3;
+  float              Present_Value;
+  uint32_t           Reliability;
+  bool               Out_Of_Service;
+  uint8_t            Units;
+  float              Prior_Value;
+  float              COV_Increment;
+  bool               Changed;
+  char               Object_Name[MAX_OBJ_NAME_LEN];
+  char               Description[MAX_OBJ_DESC_LEN];
+} __attribute__((packed)) ROUTED_ANALOG_INPUT_OBJECT;
 
 BACNET_STACK_EXPORT
 void Routed_Analog_Input_Property_Lists(
diff --git a/src/bacnet/basic/object/routed_multistate_input.c b/src/bacnet/basic/object/routed_multistate_input.c
new file mode 100644
index 00000000..9df2251f
--- /dev/null
+++ b/src/bacnet/basic/object/routed_multistate_input.c
@@ -0,0 +1,492 @@
+#include <stdbool.h>
+#include <stdlib.h>
+
+#include "bacnet/basic/services.h"
+#include "bacnet/basic/sys/keylist.h"
+#include "bacnet/basic/object/device.h"
+#include "bacnet/basic/object/routed_object.h"
+#include "bacnet/basic/object/routed_multistate_input.h"
+
+static const char *DEFAULT_STATE_TEXT = "State Not Set";
+
+static const int PROPERTIES_REQUIRED[] = {
+  PROP_OBJECT_IDENTIFIER,
+  PROP_OBJECT_NAME,
+  PROP_OBJECT_TYPE,
+  PROP_PRESENT_VALUE,
+  PROP_STATUS_FLAGS,
+  PROP_EVENT_STATE,
+  PROP_OUT_OF_SERVICE,
+  PROP_NUMBER_OF_STATES,
+  -1,
+};
+
+static const int PROPERTIES_OPTIONAL[] = {
+  PROP_DESCRIPTION,
+  PROP_STATE_TEXT,
+  -1
+};
+
+static const int PROPERTIES_PROPRIETARY[] = {
+  -1
+};
+
+static char *state_name_by_index(char *state_names, unsigned index)
+{
+  if (state_names == NULL)
+    return (char *)DEFAULT_STATE_TEXT;
+
+  unsigned count = 0;
+  int len = 0;
+  do {
+    len = strlen(state_names);
+    if (len == 0)
+      continue;
+
+    count++;
+    if (index == count)
+      return state_names;
+
+    state_names = state_names + len + 1;
+  } while (len > 0);
+
+  return NULL;
+}
+
+static unsigned state_name_count(char *state_names)
+{
+  if (state_names == NULL)
+    return 0;
+
+  unsigned count = 0;
+  int len = 0;
+  do {
+    len = strlen(state_names);
+    if (len == 0)
+      continue;
+
+    count++;
+    state_names = state_names + len + 1;
+  } while (len > 0);
+
+  return count;
+}
+
+char *
+Routed_Multistate_Input_State_Text(uint32_t object_instance, uint32_t state_index)
+{
+  DEVICE_OBJECT_DATA *device = Get_Routed_Device_Object(-1);
+
+  ROUTED_MULTISTATE_INPUT_OBJECT *object =
+    Keylist_Data(device->objects, object_instance);
+
+  if (object == NULL || state_index <= 0)
+    return NULL;
+
+  return state_name_by_index(object->State_Text, state_index);
+}
+
+static int
+Routed_Multistate_Input_State_Text_Encode(
+  uint32_t object_instance,
+  BACNET_ARRAY_INDEX index,
+  uint8_t *apdu)
+{
+    int apdu_len = BACNET_STATUS_ERROR;
+    char *pName = NULL; /* return value */
+    BACNET_CHARACTER_STRING char_string = { 0 };
+    uint32_t state_index = 1;
+
+    state_index += index;
+    pName = Routed_Multistate_Input_State_Text(object_instance, state_index);
+    if (pName) {
+        characterstring_init_ansi(&char_string, pName);
+        apdu_len = encode_application_character_string(
+            apdu, &char_string);
+    }
+
+    return apdu_len;
+}
+
+bool
+Routed_Multistate_Input_State_Text_List_Set(
+  uint32_t object_instance,
+  char *state_text_list,
+  size_t length)
+{
+  DEVICE_OBJECT_DATA *device = Get_Routed_Device_Object(-1);
+
+  ROUTED_MULTISTATE_INPUT_OBJECT *object =
+    Keylist_Data(device->objects, object_instance);
+
+  if (object == NULL)
+    return false;
+
+  char *buffer = malloc(length);
+  if (buffer == NULL)
+    return false;
+
+  memcpy(buffer, state_text_list, length);
+  object->State_Text = buffer;
+
+  return true;
+}
+
+void Routed_Multistate_Input_Init(void)
+{
+  return;
+}
+
+unsigned Routed_Multistate_Input_Count(void)
+{
+  DEVICE_OBJECT_DATA *device = Get_Routed_Device_Object(-1);
+
+  return Routed_Object_Count_By_Type(device->objects, OBJECT_MULTI_STATE_INPUT);
+}
+
+uint32_t Routed_Multistate_Input_Index_To_Instance(unsigned index)
+{
+  DEVICE_OBJECT_DATA *device = Get_Routed_Device_Object(-1);
+
+  KEY key = UINT32_MAX;
+  Routed_Object_Index_Key(
+    device->objects,
+    OBJECT_MULTI_STATE_INPUT,
+    index,
+    &key
+  );
+
+  return key;
+}
+
+unsigned Routed_Multistate_Input_Instance_To_Index(uint32_t instance)
+{
+  DEVICE_OBJECT_DATA *device = Get_Routed_Device_Object(-1);
+
+  return Keylist_Index(device->objects, instance);
+}
+
+bool Routed_Multistate_Input_Valid_Instance(uint32_t instance_number)
+{
+  DEVICE_OBJECT_DATA *device = Get_Routed_Device_Object(-1);
+
+  if (!Keylist_Data(device->objects, instance_number))
+    return false;
+
+  return true;
+}
+
+bool
+Routed_Multistate_Input_Object_Name(
+  uint32_t object_instance,
+  BACNET_CHARACTER_STRING *out)
+{
+  DEVICE_OBJECT_DATA *device = Get_Routed_Device_Object(-1);
+
+  ROUTED_MULTISTATE_INPUT_OBJECT *object =
+    Keylist_Data(device->objects, object_instance);
+
+  if (object == NULL)
+    return false;
+
+  if (strlen(object->Object_Name) <= 0) {
+    static char default_name[MAX_OBJ_NAME_LEN] = { 0 };
+    snprintf(
+      default_name,
+      sizeof(default_name),
+      "MULTI-STATE INPUT %lu",
+      (unsigned long)object_instance
+    );
+
+    return characterstring_init_ansi(out, default_name);
+  }
+
+  return characterstring_init_ansi(out, object->Object_Name);
+}
+
+int Routed_Multistate_Input_Read_Property(BACNET_READ_PROPERTY_DATA *data)
+{
+  bool invalid_data =
+       data == NULL
+    || data->application_data == NULL
+    || data->application_data_len == 0;
+
+  if (invalid_data)
+    return 0;
+
+  DEVICE_OBJECT_DATA *device = Get_Routed_Device_Object(-1);
+
+  ROUTED_MULTISTATE_INPUT_OBJECT *object =
+    Keylist_Data(device->objects, data->object_instance);
+
+  if (!object)
+    return BACNET_STATUS_ERROR;
+
+  int apdu_len = 0;
+  uint8_t *apdu = data->application_data;
+
+  switch ((int)data->object_property) {
+    case PROP_OBJECT_IDENTIFIER:
+      apdu_len = encode_application_object_id(
+        &apdu[0],
+        OBJECT_MULTI_STATE_INPUT,
+        data->object_instance
+      );
+      break;
+
+    case PROP_OBJECT_NAME: {
+      BACNET_CHARACTER_STRING name;
+      Routed_Multistate_Input_Object_Name(data->object_instance, &name);
+      apdu_len = encode_application_character_string(&apdu[0], &name);
+      break;
+    }
+
+    case PROP_OBJECT_TYPE:
+      apdu_len =
+        encode_application_enumerated(&apdu[0], OBJECT_MULTI_STATE_INPUT);
+      break;
+
+    case PROP_PRESENT_VALUE:
+      apdu_len = encode_application_unsigned(&apdu[0], object->Present_Value);
+      break;
+
+    case PROP_STATUS_FLAGS: {
+      BACNET_BIT_STRING status;
+      bitstring_init(&status);
+
+      bitstring_set_bit(&status, STATUS_FLAG_IN_ALARM, false);
+
+      bitstring_set_bit(
+        &status,
+        STATUS_FLAG_FAULT,
+        object->Reliability != RELIABILITY_NO_FAULT_DETECTED
+      );
+
+      bitstring_set_bit(&status, STATUS_FLAG_OVERRIDDEN, false);
+
+      bitstring_set_bit(
+        &status,
+        STATUS_FLAG_OUT_OF_SERVICE,
+        object->Out_Of_Service
+      );
+
+      apdu_len = encode_application_bitstring(&apdu[0], &status);
+      break;
+    }
+
+    case PROP_EVENT_STATE:
+      apdu_len = encode_application_enumerated(&apdu[0], EVENT_STATE_NORMAL);
+      break;
+
+    case PROP_RELIABILITY:
+      apdu_len = encode_application_enumerated(&apdu[0], object->Reliability);
+      break;
+
+    case PROP_OUT_OF_SERVICE:
+      apdu_len = encode_application_boolean(&apdu[0], object->Out_Of_Service);
+      break;
+
+    case PROP_NUMBER_OF_STATES: {
+      unsigned states_count = state_name_count(object->State_Text);
+      apdu_len = encode_application_unsigned(&apdu[0], states_count);
+      break;
+    }
+
+    case PROP_STATE_TEXT: {
+      unsigned states_count = state_name_count(object->State_Text);
+      apdu_len = bacnet_array_encode(data->object_instance,
+        data->array_index, Routed_Multistate_Input_State_Text_Encode,
+          states_count, apdu, data->application_data_len);
+      if (apdu_len == BACNET_STATUS_ABORT) {
+        data->error_code = ERROR_CODE_ABORT_SEGMENTATION_NOT_SUPPORTED;
+      } else if (apdu_len == BACNET_STATUS_ERROR) {
+        data->error_class = ERROR_CLASS_PROPERTY;
+        data->error_code = ERROR_CODE_INVALID_ARRAY_INDEX;
+      }
+      break;
+    }
+
+    case PROP_DESCRIPTION: {
+      BACNET_CHARACTER_STRING description;
+      characterstring_init_ansi(&description, object->Description);
+
+      apdu_len = encode_application_character_string(&apdu[0], &description);
+      break;
+    }
+
+    default:
+      data->error_class = ERROR_CLASS_PROPERTY;
+      data->error_code = ERROR_CODE_UNKNOWN_PROPERTY;
+      apdu_len = BACNET_STATUS_ERROR;
+      break;
+  }
+
+  bool is_not_valid_array =
+       apdu_len >= 0
+    && data->object_property != PROP_STATE_TEXT
+    && data->array_index != BACNET_ARRAY_ALL;
+
+  if (is_not_valid_array) {
+    data->error_class = ERROR_CLASS_PROPERTY;
+    data->error_code = ERROR_CODE_PROPERTY_IS_NOT_AN_ARRAY;
+    apdu_len = BACNET_STATUS_ERROR;
+  }
+
+  return apdu_len;
+}
+
+bool Routed_Multistate_Input_Name_Set(uint32_t object_instance, char *name)
+{
+  DEVICE_OBJECT_DATA *device = Get_Routed_Device_Object(-1);
+
+  ROUTED_MULTISTATE_INPUT_OBJECT *object =
+    Keylist_Data(device->objects, object_instance);
+
+  if (!object || strlen(name) >= MAX_OBJ_NAME_LEN)
+    return false;
+
+  memset(object->Object_Name, 0, sizeof(object->Object_Name));
+  strcpy(object->Object_Name, name);
+
+  return true;
+}
+
+bool
+Routed_Multistate_Input_Present_Value_Set(
+  uint32_t object_instance,
+  uint32_t value)
+{
+  DEVICE_OBJECT_DATA *device = Get_Routed_Device_Object(-1);
+
+  ROUTED_MULTISTATE_INPUT_OBJECT *object =
+    Keylist_Data(device->objects, object_instance);
+
+  if (!object)
+    return false;
+
+  object->Changed = object->Present_Value != value;
+  object->Present_Value = value;
+
+  return false;
+}
+
+void
+Routed_Multistate_Input_Property_Lists(
+  const int **required,
+  const int **optional,
+  const int **proprietary)
+{
+  if (required)
+    *required = PROPERTIES_REQUIRED;
+
+  if (optional)
+    *optional = PROPERTIES_OPTIONAL;
+
+  if (proprietary)
+    *proprietary = PROPERTIES_PROPRIETARY;
+}
+
+bool
+Routed_Multistate_Input_Encode_Value_List(
+  uint32_t object_instance,
+  BACNET_PROPERTY_VALUE *value_list)
+{
+  DEVICE_OBJECT_DATA *device = Get_Routed_Device_Object(-1);
+
+  ROUTED_MULTISTATE_INPUT_OBJECT *object =
+    Keylist_Data(device->objects, object_instance);
+
+  if (!object)
+    return false;
+
+  bool faulted = object->Reliability != RELIABILITY_NO_FAULT_DETECTED;
+
+  return cov_value_list_encode_unsigned(
+    value_list,
+    object->Present_Value,
+    false,
+    faulted,
+    false,
+    object->Out_Of_Service
+  );
+}
+
+bool Routed_Multistate_Input_Change_Of_Value(uint32_t instance_number)
+{
+  DEVICE_OBJECT_DATA *device = Get_Routed_Device_Object(-1);
+
+  ROUTED_MULTISTATE_INPUT_OBJECT *object =
+    Keylist_Data(device->objects, instance_number);
+
+  if (!object)
+    return false;
+
+  return object->Changed;
+}
+
+void Routed_Multistate_Input_Change_Of_Value_Clear(uint32_t instance_number)
+{
+  DEVICE_OBJECT_DATA *device = Get_Routed_Device_Object(-1);
+
+  ROUTED_MULTISTATE_INPUT_OBJECT *object =
+    Keylist_Data(device->objects, instance_number);
+
+  if (object)
+    object->Changed = false;
+}
+
+uint32_t Routed_Multistate_Input_Create(uint32_t object_instance)
+{
+  DEVICE_OBJECT_DATA *device = Get_Routed_Device_Object(-1);
+
+  if (object_instance >= BACNET_MAX_INSTANCE)
+    return BACNET_MAX_INSTANCE;
+
+  if (device->objects == NULL)
+    device->objects = Keylist_Create();
+
+  ROUTED_MULTISTATE_INPUT_OBJECT *object =
+    Keylist_Data(device->objects, object_instance);
+
+  if (object != NULL)
+    return object_instance;
+
+  object = calloc(1, sizeof(ROUTED_MULTISTATE_INPUT_OBJECT));
+  if (!object)
+    return BACNET_MAX_INSTANCE;
+
+  object->Type = OBJECT_MULTI_STATE_INPUT;
+  object->State_Text = NULL;
+  object->Reliability = RELIABILITY_NO_FAULT_DETECTED;
+  object->Present_Value = 1;
+  object->Out_Of_Service = false;
+  object->Changed = false;
+
+  memset(object->Object_Name, 0, sizeof(object->Object_Name));
+  memset(object->Description, 0, sizeof(object->Description));
+
+  if (Keylist_Data_Add(device->objects, object_instance, object) < 0) {
+    free(object);
+    return BACNET_MAX_INSTANCE;
+  }
+
+  return object_instance;
+}
+
+bool Routed_Multistate_Input_Delete(uint32_t object_instance)
+{
+  DEVICE_OBJECT_DATA *device = Get_Routed_Device_Object(-1);
+
+  ROUTED_MULTISTATE_INPUT_OBJECT *object =
+    Keylist_Data_Delete(device->objects, object_instance);
+
+  if (!object)
+    return false;
+
+  if (object->State_Text)
+    free(object->State_Text);
+
+  free(object);
+
+  return true;
+}
diff --git a/src/bacnet/basic/object/routed_multistate_input.h b/src/bacnet/basic/object/routed_multistate_input.h
new file mode 100644
index 00000000..d9a5725f
--- /dev/null
+++ b/src/bacnet/basic/object/routed_multistate_input.h
@@ -0,0 +1,92 @@
+#ifndef BACNET_BASIC_ROUTED_OBJECT_MULTISTATE_INPUT_H
+#define BACNET_BASIC_ROUTED_OBJECT_MULTISTATE_INPUT_H
+
+#include <stdbool.h>
+#include <stdint.h>
+#include "bacnet/bacenum.h"
+#include "bacnet/rp.h"
+
+typedef struct routed_multistate_input_object {
+  BACNET_OBJECT_TYPE Type;
+  bool               Out_Of_Service;
+  bool               Changed;
+  bool               Write_Enabled;
+  uint8_t            Present_Value;
+  uint8_t            Reliability;
+  char               *State_Text;
+  char               Object_Name[MAX_OBJ_NAME_LEN];
+  char               Description[MAX_OBJ_DESC_LEN];
+} __attribute__((packed)) ROUTED_MULTISTATE_INPUT_OBJECT;
+
+BACNET_STACK_EXPORT
+void Routed_Multistate_Input_Property_Lists(
+    const int **required,
+    const int **optional,
+    const int **proprietary);
+
+BACNET_STACK_EXPORT
+bool Routed_Multistate_Input_Valid_Instance(uint32_t object_instance);
+
+BACNET_STACK_EXPORT
+unsigned Routed_Multistate_Input_Count(void);
+
+BACNET_STACK_EXPORT
+uint32_t Routed_Multistate_Input_Index_To_Instance(unsigned index);
+
+BACNET_STACK_EXPORT
+unsigned Routed_Multistate_Input_Instance_To_Index(uint32_t instance);
+
+BACNET_STACK_EXPORT
+bool Routed_Multistate_Input_Object_Name(
+  uint32_t object_instance,
+  BACNET_CHARACTER_STRING * object_name);
+
+BACNET_STACK_EXPORT
+bool Routed_Multistate_Input_Name_Set(uint32_t object_instance, char *name);
+
+BACNET_STACK_EXPORT
+int Routed_Multistate_Input_Read_Property(BACNET_READ_PROPERTY_DATA *data);
+
+BACNET_STACK_EXPORT
+bool Routed_Multistate_Input_State_Text_List_Set(
+  uint32_t object_instance,
+  char *state_text_list,
+  size_t length);
+
+BACNET_STACK_EXPORT
+bool Routed_Multistate_Input_Present_Value_Set(
+  uint32_t object_instance,
+  uint32_t value);
+
+BACNET_STACK_EXPORT
+unsigned Routed_Multistate_Input_Event_State(uint32_t object_instance);
+
+BACNET_STACK_EXPORT
+bool Routed_Multistate_Input_Event_State_Set(
+  uint32_t object_instance,
+  unsigned state);
+
+BACNET_STACK_EXPORT
+bool Routed_Multistate_Input_Change_Of_Value(uint32_t instance);
+
+BACNET_STACK_EXPORT
+void Routed_Multistate_Input_Change_Of_Value_Clear(uint32_t instance);
+
+BACNET_STACK_EXPORT
+bool Routed_Multistate_Input_Encode_Value_List(
+  uint32_t object_instance,
+  BACNET_PROPERTY_VALUE *value_list);
+
+BACNET_STACK_EXPORT
+void Routed_Multistate_Input_Intrinsic_Reporting(uint32_t object_instance);
+
+BACNET_STACK_EXPORT
+uint32_t Routed_Multistate_Input_Create(uint32_t object_instance);
+
+BACNET_STACK_EXPORT
+bool Routed_Multistate_Input_Delete(uint32_t object_instance);
+
+BACNET_STACK_EXPORT
+void Routed_Multistate_Input_Init(void);
+
+#endif /* BACNET_BASIC_ROUTED_OBJECT_MULTISTATE_INPUT_H */
diff --git a/src/bacnet/basic/object/routed_object.c b/src/bacnet/basic/object/routed_object.c
new file mode 100644
index 00000000..70696094
--- /dev/null
+++ b/src/bacnet/basic/object/routed_object.c
@@ -0,0 +1,63 @@
+#include "bacnet/basic/object/routed_object.h"
+
+int Routed_Object_Count_By_Type(OS_Keylist objects, BACNET_OBJECT_TYPE type)
+{
+  int count = 0;
+
+  int total_count = Keylist_Count(objects);
+  for (int i = 0; i < total_count; i++) {
+    ROUTED_OBJECT *object = Keylist_Data_Index(objects, i);
+    if (object->Type != type)
+      continue;
+
+    count += 1;
+  }
+
+  return count;
+}
+
+void *
+Routed_Object_Next_By_Type(
+  OS_Keylist objects,
+  BACNET_OBJECT_TYPE type,
+  int *cursor)
+{
+  if (cursor == NULL)
+    return NULL;
+
+  int total_count = Keylist_Count(objects);
+  for (int i = *cursor; i < total_count; i++) {
+    ROUTED_OBJECT *object = Keylist_Data_Index(objects, i);
+    if (object->Type != type)
+      continue;
+
+    *cursor = i;
+    return object;
+  }
+
+  return NULL;
+}
+
+bool
+Routed_Object_Index_Key(
+  OS_Keylist objects,
+  BACNET_OBJECT_TYPE type,
+  int index,
+  KEY *key)
+{
+  int total_count = Keylist_Count(objects);
+  int type_index = 0;
+
+  for (int i = 0; i < total_count; i++) {
+    ROUTED_OBJECT *object = Keylist_Data_Index(objects, i);
+    if (object->Type != type)
+      continue;
+
+    if (type_index == index)
+      return Keylist_Index_Key(objects, i, key);
+
+    type_index += 1;
+  }
+
+  return false;
+}
diff --git a/src/bacnet/basic/object/routed_object.h b/src/bacnet/basic/object/routed_object.h
new file mode 100644
index 00000000..4bd86cf9
--- /dev/null
+++ b/src/bacnet/basic/object/routed_object.h
@@ -0,0 +1,31 @@
+#ifndef BACNET_BASIC_ROUTED_OBJECT_H
+#define BACNET_BASIC_ROUTED_OBJECT_H
+
+#include <stdbool.h>
+
+#include "bacnet/bacenum.h"
+#include "bacnet/basic/sys/keylist.h"
+
+#define MAX_OBJ_NAME_LEN 32
+#define MAX_OBJ_DESC_LEN 64
+
+typedef struct routed_object {
+  BACNET_OBJECT_TYPE Type;
+} __attribute__((packed)) ROUTED_OBJECT;
+
+int Routed_Object_Count_By_Type(OS_Keylist objects, BACNET_OBJECT_TYPE type);
+
+void *
+Routed_Object_Next_By_Type(
+  OS_Keylist objects,
+  BACNET_OBJECT_TYPE type,
+  int *cursor);
+
+bool
+Routed_Object_Index_Key(
+  OS_Keylist objects,
+  BACNET_OBJECT_TYPE type,
+  int index,
+  KEY *key);
+
+#endif /* BACNET_BASIC_ROUTED_OBJECT_H */
-- 
2.48.1

